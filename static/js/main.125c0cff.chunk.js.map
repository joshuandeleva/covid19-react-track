{"version":3,"sources":["Table.js","util.js","App.js","serviceWorker.js","index.js"],"names":["Table","sortData","data","sort","a","b","cases","App","useState","setCountries","setCountryInfo","setTableData","lat","lng","setMapCountries","useEffect","fetch","then","response","json","countries","map","country","name","value","countryInfo","iso2","sortedData","getCountriesData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iWAgBeA,I,QCGFC,G,cAAW,SAACC,GAExB,OADgB,YAAOA,GACLC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,MAAQD,EAAEC,OAAS,EAAI,O,2BCsI7CC,MA3If,WAAe,MAEoBC,mBAAS,IAF7B,mBAEIC,GAFJ,aAIgBD,mBAAS,aAJzB,gCAMwBA,mBAAS,KANjC,mBAMME,GANN,aAQoBF,mBAAS,IAR7B,mBAQIG,GARJ,aAUoBH,mBAAS,CAC1CI,IAAK,SACLC,KAAM,UAZO,gCAc0BL,mBAAS,KAdnC,mBAcOM,GAdP,aAgBgBN,mBAAS,GAhBzB,gCAkBoBA,mBAAS,UAlB7B,6BAoBdO,qBAAU,YAEa,uCAAG,sBAAAX,EAAA,sEAClBY,MAAM,4CACVC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACf,GAEN,IAAMkB,EAAYlB,EAAKmB,KAAI,SAACC,GAAD,MAAc,CACxCC,KAAMD,EAAQA,QACdE,MAAOF,EAAQG,YAAYC,SAGtBC,EAAa1B,EAASC,GAE5BS,EAAagB,GACbb,EAAgBZ,GAChBO,EAAaW,MAdS,2CAAH,qDAiBtBQ,KACE,IAEHb,qBAAU,WACTC,MAAM,sCACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACf,GACNQ,EAAeR,QAEf,KCpDgB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.125c0cff.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Table.css'\r\nimport numeral from \"numeral\"\r\nfunction Table({countries}) {\r\n    return (\r\n        <div className=\"table\">\r\n            {countries.map(({ country , cases}) => (\r\n               <tr>\r\n                    <td>{country}</td>\r\n                    <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\r\n               </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n\tcases: {\r\n\t\thex: \"#CC1034\",\r\n\t\tmultiplier: 800,\r\n\t},\r\n\trecovered: {\r\n\t\thex: \"#7dd71d\",\r\n\t\tmultiplier: 1200,\r\n\t},\r\n\tdeaths: {\r\n\t\thex: \"#fb443\",\r\n\t\tmultiplier: 2000,\r\n\t},\r\n};\r\n//sorting of data in asceding order\r\nexport const sortData = (data) => {\r\n\tconst sortedData = [...data];\r\n\treturn sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\r\n};\r\n\r\n\r\n//draw circles on the map with intereactive tooltip\r\nexport const showDataOnMap = (data, casesType = \"cases\") => \r\n\tdata.map((country) => (\r\n\t\t//show the circles\r\n\t\t<Circle\r\n\t\t\tcenter={[country.countryInfo.lat, country.countryInfo.long]}\r\n\t\t\tfillOpacity={0.4}\r\n\t\t\tcolor={casesTypeColors[casesType].hex}\r\n\t\t\tfillColor={casesTypeColors[casesType].hex}\r\n\t\t\tradius={\r\n\t\t\t\tMath.sqrt(country[casesType]) *\r\n\t\t\t\tcasesTypeColors[casesType].multiplier\r\n\t\t\t}\r\n\t\t>\r\n\t\t\t<Popup>\r\n\t\t\t\t<div className=\"info-container\">\r\n                    <div className=\"info-flag\" style={{backgroundImage:`url(${country.countryInfo.flag})`}}></div>\r\n                    <div className=\"info-name\">{country.country}</div>\r\n                    <div className=\"iinfo-confirmed\">Cases:{numeral(country.cases).format(\"0.0\")}</div>\r\n                    <div className=\"info-recovered\">Recovered:{numeral(country.recovered).format(\"0.0\")}</div>\r\n                    <div className=\"info-deaths\">Deaths:{numeral(country.deaths).format(\"0.0\")}</div>\r\n                </div>\r\n\t\t\t</Popup>\r\n\t\t</Circle>\r\n\t));\r\n\r\n//format data \r\nexport const prettyPrintState = (stat) =>\r\n    stat ?`+${numeral(stat).format(\"0.0a\")}` : 0\r\n   ","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n\tFormControl,\n\tMenuItem,\n\tSelect,\n\tCard,\n\tCardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Table from \"./Table\";\nimport Map from \"./Map\";\nimport { sortData } from \"./util\";\nimport { prettyPrintState } from \"./util\";\nimport LineGraph from \"./LineGraph\";\nimport \"leaflet/dist/leaflet.css\";\nfunction App() {\n\t//state for showng countries by default is a empty array\n\tconst [countries, setCountries] = useState([]);\n\t//show one country by default i.e Worldwide\n\tconst [country, setCountry] = useState(\"worldwide\");\n\t//managing the state o country info\n\tconst [countryInfo, setCountryInfo] = useState({});\n\t//table data in the state\n\tconst [tableData, setTableData] = useState([]);\n\t//handling length of map\n\tconst [mapCenter, setMapCenter] = useState({\n\t\tlat: 34.80746,\n\t\tlng: -40.4796,\n\t});\n\tconst [mapCountries, setMapCountries] = useState([]);\n\t//handle zooming of a map\n\tconst [mapZoom, setMapZoom] = useState(3);\n\t//handle cases\n\tconst [casesType, setCasesType] = useState(\"cases\");\n\t//making a call using useeffect based on a given condition\n\tuseEffect(() => {\n\t\t//async =>sends a request ,wait\n\t\tconst getCountriesData = async () => {\n\t\t\tawait fetch(\"https://disease.sh/v3/covid-19/countries\")\n\t\t\t\t.then((response) => response.json())\n\t\t\t\t.then((data) => {\n\t\t\t\t\t//restructure the countries //maps return array of object\n\t\t\t\t\tconst countries = data.map((country) => ({\n\t\t\t\t\t\tname: country.country, //Kenya , Tanzania\n\t\t\t\t\t\tvalue: country.countryInfo.iso2, //Uk UsA\n\t\t\t\t\t}));\n\t\t\t\t\t//sorted data\n\t\t\t\t\tconst sortedData = sortData(data);\n\t\t\t\t\t//display countries in a sorted order\n\t\t\t\t\tsetTableData(sortedData);\n\t\t\t\t\tsetMapCountries(data);\n\t\t\t\t\tsetCountries(countries);\n\t\t\t\t});\n\t\t};\n\t\tgetCountriesData();\n\t}, []);\n\t//get world wide data statistics\n\tuseEffect(() => {\n\t\tfetch(\"https://disease.sh/v3/covid-19/all\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetCountryInfo(data);\n\t\t\t});\n\t}, []);\n\t//triggers the select option\n\tconst onCountryChange = async (event) => {\n\t\tconst countryCode = event.target.value;\n\t\tsetCountry(countryCode);\n\t\t//make a api call through a tenary operation\n\t\tconst url =\n\t\t\tcountryCode === \"worldwide\"\n\t\t\t\t? \"https://disease.sh/v3/covid-19/all\"\n\t\t\t\t: `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\t\tawait fetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\t//show the country on the input dropdown by updating the input field\n\t\t\t\tsetCountry(countryCode);\n\t\t\t\t//stores the response of all data\n\t\t\t\tsetCountryInfo(data);\n\t\t\t\t//on hover to a given country locate it on the map\n\t\t\t\tsetMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n\t\t\t\tsetMapZoom(4);\n\t\t\t});\n\t};\n\treturn (\n\t\t//show data\n\t\t<div className=\"app\">\n\t\t\t<div className=\"app__left\">\n\t\t\t\t<div className=\"app__header\">\n\t\t\t\t\t<h1>COV1D-19 TRACKER</h1>\n\t\t\t\t\t<FormControl className=\"app__dropdown\">\n\t\t\t\t\t\t<Select\n\t\t\t\t\t\t\tvariant=\"outlined\"\n\t\t\t\t\t\t\tonChange={onCountryChange}\n\t\t\t\t\t\t\tvalue={country}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t{/* looop through all the countries and show list of options*/}\n\t\t\t\t\t\t\t<MenuItem value=\"worldwide\">worldwide</MenuItem>\n\t\t\t\t\t\t\t{countries.map((country) => (\n\t\t\t\t\t\t\t\t<MenuItem value={country.value}>\n\t\t\t\t\t\t\t\t\t{country.name}\n\t\t\t\t\t\t\t\t</MenuItem>\n\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t</Select>\n\t\t\t\t\t</FormControl>\n\t\t\t\t</div>\n\t\t\t\t{/* show info boxes i.e corona cases, recoverd and cases reported*/}\n\t\t\t\t<div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"cases\")}\n\t\t\t\t\t\ttitle=\"Coronavirus case\"\n\t\t\t\t\t\tcases={prettyPrintState(countryInfo.todayCases)}\n\t\t\t\t\t\ttotal={prettyPrintState(countryInfo.cases)}\n\t\t\t\t\t/>\n          <InfoBox\n            active={casesType === \"recovered\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"recovered\")}\n\t\t\t\t\t\ttitle=\"Recovered\"\n\t\t\t\t\t\tcases={prettyPrintState(countryInfo.todayRecovered)}\n\t\t\t\t\t\ttotal={prettyPrintState(countryInfo.recovered)}\n\t\t\t\t\t/>\n          <InfoBox\n             isRed\n            active={casesType === \"deaths\"}\n\t\t\t\t\t\tonClick={(e) => setCasesType(\"deaths\")}\n\t\t\t\t\t\ttitle=\"Deaths\"\n\t\t\t\t\t\tcases={prettyPrintState(countryInfo.todayDeaths)}\n\t\t\t\t\t\ttotal={prettyPrintState(countryInfo.deaths)}\n\t\t\t\t\t/>\n\t\t\t\t</div>\n\t\t\t\t{/*show the map */}\n\n\t\t\t\t<Map\n\t\t\t\t\tcasesType={casesType}\n\t\t\t\t\tcountries={mapCountries}\n\t\t\t\t\tcenter={mapCenter}\n\t\t\t\t\tzoom={mapZoom}\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t{/*display sorted data in the table */}\n\t\t\t<Card className=\"app__right\">\n\t\t\t\t<CardContent>\n\t\t\t\t\t<h3>Live Cases by Country</h3>\n          <Table countries={tableData} />\n          <h3 className=\"app__graphTitle\">Worldwide new {casesType}</h3>\n\t\t\t\t\t<LineGraph  className=\" app__graph\" caseType={casesType} />\n\t\t\t\t</CardContent>\n\t\t\t</Card>\n\t\t</div>\n\t);\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}